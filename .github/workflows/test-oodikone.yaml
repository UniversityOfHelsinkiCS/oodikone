name: 'Test oodikone and release to staging'

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/test-oodikone.yaml'
      - 'cypress/**'
      - 'cypress.json'
      - 'services/**'
      - 'docker-compose.ci.yml'
      - 'docker-compose.test.yml'
      - 'nginx.conf'
      - 'package*.json'

jobs:
  # === Static tests / linting ===

  lint_backend:
    name: 'Lint backend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: 'Install dependencies'
        run: npm ci && cd services/backend && npm ci
      - name: 'Run backend linter'
        run: npm run eslint services/backend

  lint_frontend:
    name: 'Lint frontend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: 'Install dependencies'
        run: npm ci && cd services/frontend && npm ci
      - name: 'Run frontend linter'
        run: npm run concurrently \
          'eslint --ext .jsx,.js services/frontend' \
          'stylelint services/frontend/src/**/*.css'

  lint_userservice:
    name: 'Lint userservice'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: 'Install dependencies'
        run: npm ci && cd services/userservice && npm ci
      - name: 'Run frontend linter'
        run: npm run eslint services/userservice

  # === Build images ===

  build_backend:
    name: 'Build backend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: 'Build image and export it'
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=staging
          cache-from: |
            type=registry,ref=toska/oodikone2-backend:staging
            type=registry,ref=toska/oodikone2-backend:latest
          cache-to: type=inline
          context: services/backend
          push: false
          tags: toska/oodikone2-backend:staging
          target: production
          outputs: type=docker,dest=/tmp/backend.tar
      - name: 'Upload image for other jobs'
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/backend.tar

  build_frontend:
    name: 'Build frontend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: 'Get current time'
        id: get_current_time
        run: echo ::set-output name=NOW::"$(date --iso-8601=seconds)"
      - name: 'Build image and export it'
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=staging
            BUILT_AT=${{ steps.get_current_time.outputs.NOW }}
          cache-from: |
            type=registry,ref=toska/oodikone2-frontend:staging
            type=registry,ref=toska/oodikone2-frontend:latest
          cache-to: type=inline
          context: services/frontend
          push: false
          tags: toska/oodikone2-frontend:staging
          target: production
          outputs: type=docker,dest=/tmp/frontend.tar
      - name: 'Upload image for other jobs'
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/frontend.tar

  build_userservice:
    name: 'Build userservice'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: 'Build image and export it'
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=staging
          cache-from: |
            type=registry,ref=toska/oodikone2-userservice:staging
            type=registry,ref=toska/oodikone2-userservice:latest
          cache-to: type=inline
          context: services/userservice
          push: false
          tags: toska/oodikone2-userservice:staging
          target: production
          outputs: type=docker,dest=/tmp/userservice.tar
      - name: 'Upload image for other jobs'
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/userservice.tar

  # === Integration tests ===
  #
  run_userservice_integration_tests:
    name: 'Run userservice integration tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Run tests included in docker build'
        run: docker-compose --file docker-compose.test.yml up --build userservice-test

  # === End-to-end tests ===

  test_course_statistics:
    name: 'Test course statistics'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Course_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_custom_population:
    name: 'Test custom population'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Custom_population.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_population_statistics:
    name: 'Test population statistics'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Population_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_filters:
    name: 'Test filters'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Filters.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_student_statistics:
    name: 'Test student statistics'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Student_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_studyprogramme_overview:
    name: 'Test studyprogramme overview'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Studyprogramme_overview.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_teachers_and_users:
    name: 'Test teachers and users'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Run cypress'
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: |
            cypress/integration/Teachers.js
            cypress/integration/Users.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: 'Upload video if tests fail'
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  # === Other tests ===

  test_service_exit_statuses:
    name: 'Check services run correctly'
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Check that exit statuses are not errors'
        run: |
          docker ps -a
          if [[ $(docker ps --all | grep -Eo '(Exited|Restarting) \([0-9]+\)' | grep -Eo '[0-9]+' | awk 'BEGIN {sum=0} { sum += $1 } END { print sum }') != '0' ]]; then
            echo 'Some process had nonzero exit code';
            exit 1;
          fi
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  # === Release ===

  release_images:
    name: 'Release built images'
    runs-on: ubuntu-latest
    needs:
      - lint_backend
      - lint_frontend
      - lint_userservice
      - run_userservice_integration_tests
      - test_course_statistics
      - test_custom_population
      - test_filters
      - test_population_statistics
      - test_student_statistics
      - test_studyprogramme_overview
      - test_teachers_and_users
      - test_service_exit_statuses
    steps:
      - uses: actions/checkout@v2
      - name: 'Download images'
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: 'Login to DockerHub'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 'Create a container from frontend'
        run: docker create --name frontend toska/oodikone2-frontend:staging
      - name: 'Copy assets from the container'
        run: docker cp frontend:/usr/src/app/build ./build
      - name: 'Create Sentry release'
        uses: getsentry/action-release@v1
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: toska
          SENTRY_PROJECT: oodikone
        with:
          environment: staging
          set_commits: 'skip'
          sourcemaps: './build/static/js'
          url_prefix: '~/oodikone/static/js'
          version: ${{ github.sha }}
      - name: 'Push to docker hub'
        run: |
          docker push toska/oodikone2-backend:staging
          docker push toska/oodikone2-frontend:staging
          docker push toska/oodikone2-userservice:staging
      - name: 'Send deployment success notification to slack'
        if: success()
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: deployment
          softa-url: https://oodikone-staging.cs.helsinki.fi/
          deployment-target: staging
      - name: 'Send deployment failure notification to slack'
        if: failure()
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: deployment-failure
          deployment-target: staging

  report_test_failure:
    runs-on: ubuntu-latest
    name: 'Report test failure to oodikone notifications'
    needs:
      - lint_backend
      - lint_frontend
      - lint_userservice
      - run_userservice_integration_tests
      - test_course_statistics
      - test_custom_population
      - test_filters
      - test_population_statistics
      - test_student_statistics
      - test_studyprogramme_overview
      - test_teachers_and_users
      - test_service_exit_statuses
    if: failure()
    steps:
      - uses: actions/checkout@v2
      - name: 'Send notification to slack'
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: test-failure
