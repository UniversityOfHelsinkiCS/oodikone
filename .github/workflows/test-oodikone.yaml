name: 'Test oodikone and release to staging'

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/test-oodikone.yaml'
      - '.github/actions/**'
      - 'cypress/**'
      - 'cypress.config.json'
      - 'services/**'
      - '!services/backend/src/rapodiff.js'
      - 'docker-compose.ci.yml'
      - 'docker-compose.test.yml'
      - 'nginx.conf'
      - 'package*.json'
      - 'updater/sis-updater-worker/src/db/migrations/**'

jobs:
  # === Static tests / linting ===

  lint_backend:
    name: 'Lint backend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.4.1
        with:
          node-version: 14
      - name: 'Install dependencies'
        run: npm ci && cd services/backend && npm ci
      - name: 'Run backend linter'
        run: npm run eslint services/backend

  lint_frontend:
    name: 'Lint frontend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.4.1
        with:
          node-version: 14
      - name: 'Install dependencies'
        run: npm ci && cd services/frontend && npm ci
      - name: 'Run frontend linter'
        run: npm run concurrently \
          'eslint --ext .jsx,.js services/frontend' \
          'stylelint services/frontend/src/**/*.css'

  # === Build images ===
  build_backend:
    name: 'Build backend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: 'Build image and export it'
        uses: docker/build-push-action@v3
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=staging
          cache-from: |
            type=registry,ref=toska/oodikone2-backend:staging
            type=registry,ref=toska/oodikone2-backend:latest
          cache-to: type=inline
          context: services/backend
          push: false
          tags: toska/oodikone2-backend:staging
          target: production
          outputs: type=docker,dest=/tmp/backend.tar
      - name: 'Upload image for other jobs'
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/backend.tar

  build_frontend:
    name: 'Build frontend'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: 'Get current time'
        id: get_current_time
        run: echo "NOW=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT
      - name: 'Build image and export it'
        uses: docker/build-push-action@v3
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=staging
            BUILT_AT=${{ steps.get_current_time.outputs.NOW }}
          cache-from: |
            type=registry,ref=toska/oodikone2-frontend:staging
            type=registry,ref=toska/oodikone2-frontend:latest
          cache-to: type=inline
          context: services/frontend
          push: false
          tags: toska/oodikone2-frontend:staging
          target: production
          outputs: type=docker,dest=/tmp/frontend.tar
      - name: 'Upload image for other jobs'
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/frontend.tar

  build_and_push_anon_sis_db:
    name: 'Build anon sis-db and push to toska hub if new migrations have been added'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: check_migrations
        with:
          filters: |
            migrations:
              - 'updater/sis-updater-worker/src/db/migrations/**'
              - '.github/workflows/test-oodikone.yaml'
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v2
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Let sis-updater-worker run migrations, then push new version of image to toska hub'
        if: steps.check_migrations.outputs.migrations == 'true'
        run: |
          docker-compose --file docker-compose.ci.yml up --detach sis-updater-worker
          sleep 30 # wait for sis-updater-worker to start and run migrations
          ./anonyymioodi/commit_and_push_to_toska_hub.sh sis-db

  build_and_push_anon_kone_db:
    name: 'Build anon kone-db and push to toska hub if new migrations have been added'
    needs:
      - build_backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: check_migrations
        with:
          filters: |
            migrations:
              - 'services/backend/src/database/migrations_kone/**'
              - '.github/workflows/test-oodikone.yaml'
      - name: 'Download images'
        uses: actions/download-artifact@v3
        with:
          path: /tmp/
      - name: 'Load built backend image'
        run: docker load --input /tmp/artifact/backend.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v2
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Let backend run migrations, then push new version of image to toska hub'
        if: steps.check_migrations.outputs.migrations == 'true'
        run: |
          docker-compose --file docker-compose.ci.yml up --detach backend
          sleep 30 # wait for sis-updater-worker to start and run migrations
          ./anonyymioodi/commit_and_push_to_toska_hub.sh kone-db

  build_and_push_anon_user_db:
    name: 'Build anon user-db and push to toska hub if new migrations have been added'
    needs:
      - build_backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: check_migrations
        with:
          filters: |
            migrations:
              - 'services/backend/src/database/migrations_user/**'
              - '.github/workflows/test-oodikone.yaml'
      - name: 'Download images'
        uses: actions/download-artifact@v3
        with:
          path: /tmp/
      - name: 'Load built backend image'
        run: docker load --input /tmp/artifact/backend.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v2
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Let backend run migrations, then push new version of image to toska hub'
        if: steps.check_migrations.outputs.migrations == 'true'
        run: |
          docker-compose --file docker-compose.ci.yml up --detach backend
          sleep 30 # wait for sis-updater-worker to start and run migrations
          ./anonyymioodi/commit_and_push_to_toska_hub.sh user-db

  # === End-to-end tests ===
  test_course_statistics:
    name: 'Test course statistics'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Course_statistics.js

  test_custom_population:
    name: 'Test custom population'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Custom_population.js

  test_population_statistics:
    name: 'Test population statistics'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Population_statistics.js

  test_filters:
    name: 'Test filters'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Filters.js

  test_student_statistics:
    name: 'Test student statistics'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Student_statistics.js

  test_studyprogramme_overview:
    name: 'Test studyprogramme overview'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Studyprogramme_overview.js

  test_teachers_and_users:
    name: 'Test teachers and users'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: |
            cypress/e2e/Teachers.js
            cypress/e2e/Users.js

  test_faculty_statistics:
    name: 'Test faculty statistics'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Faculty_statistics.js

  test_open_uni_search:
    name: 'Test open uni search'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        uses: ./.github/actions/run-tests
        with:
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
          spec: cypress/e2e/Openuni.js

  # === Other tests ===

  test_service_exit_statuses:
    name: 'Check services run correctly'
    needs:
      - build_backend
      - build_frontend
      - build_and_push_anon_sis_db
      - build_and_push_anon_kone_db
      - build_and_push_anon_user_db
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Download images'
        uses: actions/download-artifact@v3
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
      - name: 'Login to toska docker registry'
        uses: docker/login-action@v2
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: 'Run services, pull rest of the needed images'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: 'Check that exit statuses are not errors'
        run: |
          docker ps -a
          if [[ $(docker ps --all | grep -Eo '(Exited|Restarting) \([0-9]+\)' | grep -Eo '[0-9]+' | awk 'BEGIN {sum=0} { sum += $1 } END { print sum }') != '0' ]]; then
            echo 'Some process had nonzero exit code';
            exit 1;
          fi
      - name: 'Print logs on failure'
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  # === Release ===

  release_images:
    name: 'Release built images'
    runs-on: ubuntu-latest
    needs:
      - lint_backend
      - lint_frontend
      - test_course_statistics
      - test_custom_population
      - test_filters
      - test_population_statistics
      - test_student_statistics
      - test_studyprogramme_overview
      - test_teachers_and_users
      - test_faculty_statistics
      - test_service_exit_statuses
    steps:
      - uses: actions/checkout@v3
      - name: 'Download images'
        uses: actions/download-artifact@v3
        with:
          path: /tmp/
      - name: 'Load built images'
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
      - name: 'Login to DockerHub'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 'Create a container from frontend'
        run: docker create --name frontend toska/oodikone2-frontend:staging
      - name: 'Copy assets from the container'
        run: docker cp frontend:/usr/src/app/build ./build
      - name: 'Create Sentry release'
        uses: getsentry/action-release@v1
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: toska
          SENTRY_PROJECT: oodikone
        with:
          environment: staging
          set_commits: 'skip'
          sourcemaps: './build/static/js'
          url_prefix: '~/static/js'
          version: ${{ github.sha }}
      - name: 'Push to docker hub'
        run: |
          docker push toska/oodikone2-backend:staging
          docker push toska/oodikone2-frontend:staging
      - name: 'Send deployment success notification to slack'
        if: success()
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: deployment
          softa-url: https://oodikone-staging.cs.helsinki.fi/
          deployment-target: staging
      - name: 'Send deployment failure notification to slack'
        if: failure()
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: deployment-failure
          deployment-target: staging

  report_test_failure:
    runs-on: ubuntu-latest
    name: 'Report test failure to oodikone notifications'
    needs:
      - lint_backend
      - lint_frontend
      - test_course_statistics
      - test_custom_population
      - test_filters
      - test_population_statistics
      - test_student_statistics
      - test_studyprogramme_overview
      - test_teachers_and_users
      - test_faculty_statistics
      - test_service_exit_statuses
    if: failure()
    steps:
      - uses: actions/checkout@v3
      - name: 'Send notification to slack'
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: test-failure
