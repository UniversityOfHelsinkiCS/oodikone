name: "Test oodikone"

on:
  push:
    branches-ignore:
      - master
    paths:
      - .github/workflows/test-oodikone.yaml
      - cypress/**
      - cypress.json
      - services/**
      - docker-compose.ci.yml
      - nginx.conf
      - package*.json

jobs:
  # === Static tests / linting ===

  lint_backend:
    name: "Lint backend"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: "Install dependencies"
        run: npm ci && cd services/backend && npm ci
      - name: "Run backend linter"
        run: npm run eslint services/backend

  lint_frontend:
    name: "Lint frontend"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: "Install dependencies"
        run: npm ci && cd services/frontend && npm ci
      - name: "Run frontend linter"
        run: npm run concurrently \
              'eslint --ext .jsx,.js services/frontend' \
              'stylelint services/frontend/src/**/*.css'

  lint_userservice:
    name: "Lint userservice"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: "Install dependencies"
        run: npm ci && cd services/userservice && npm ci
      - name: "Run frontend linter"
        run: npm run eslint services/userservice

  # === Build images ===

  build_backend:
    name: "Build backend"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: "Build image and export it"
        uses: docker/build-push-action@v2
        with:
          cache-from: |
            type=registry,ref=toska/oodikone2-backend:trunk
            type=registry,ref=toska/oodikone2-backend:staging
            type=registry,ref=toska/oodikone2-backend:latest
          cache-to: type=inline
          context: services/backend
          push: false
          tags: toska/oodikone2-backend:trunk
          target: production
          outputs: type=docker,dest=/tmp/backend.tar
      - name: "Upload image for other jobs"
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/backend.tar

  build_frontend:
    name: "Build frontend"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: "Build image and export it"
        uses: docker/build-push-action@v2
        with:
          cache-from: |
            type=registry,ref=toska/oodikone2-frontend:trunk
            type=registry,ref=toska/oodikone2-frontend:staging
            type=registry,ref=toska/oodikone2-frontend:latest
          cache-to: type=inline
          context: services/frontend
          push: false
          tags: toska/oodikone2-frontend:trunk
          target: production
          outputs: type=docker,dest=/tmp/frontend.tar
      - name: "Upload image for other jobs"
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/frontend.tar

  build_userservice:
    name: "Build userservice"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: "Build image and export it"
        uses: docker/build-push-action@v2
        with:
          cache-from: |
            type=registry,ref=toska/oodikone2-userservice:trunk
            type=registry,ref=toska/oodikone2-userservice:staging
            type=registry,ref=toska/oodikone2-userservice:latest
          cache-to: type=inline
          context: services/userservice
          push: false
          tags: toska/oodikone2-userservice:trunk
          target: production
          outputs: type=docker,dest=/tmp/userservice.tar
      - name: "Upload image for other jobs"
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/userservice.tar

  # === Integration tests ===
  run_userservice_integration_tests:
    name: "Run userservice integration tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Run tests included in docker build"
        run: docker-compose --file docker-compose.test.yml up --build userservice-test

  # === End-to-end tests ===

  test_course_population:
    name: "Test course population"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Course_population.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_course_statistics:
    name: "Test course statistics"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Course_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_custom_population:
    name: "Test custom population"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Custom_population.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_population_statistics:
    name: "Test population statistics"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Population_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_filters:
    name: "Test filters"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Filters.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_student_statistics:
    name: "Test student statistics"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Student_statistics.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_studyprogramme_overview:
    name: "Test studyprogramme overview"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: cypress/integration/Studyprogramme_overview.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  test_teachers_and_users:
    name: "Test teachers and users"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Run cypress"
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          spec: |
            cypress/integration/Teachers.js
            cypress/integration/Users.js
        env:
          CYPRESS_baseUrl: http://localhost:1337
      - name: "Upload video if tests fail"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Cypress videos
          path: ./cypress/videos/*
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  # === Other tests ===

  test_service_exit_statuses:
    name: "Check services run correctly"
    needs:
      - build_backend
      - build_frontend
      - build_userservice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to toska docker registry"
        uses: docker/login-action@v1
        with:
          registry: registry.toska.cs.helsinki.fi
          username: ${{ secrets.TOSKAREGISTRY_USERNAME }}
          password: ${{ secrets.TOSKAREGISTRY_PASSWORD }}
      - name: "Run services, pull rest of the needed images"
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate
      - name: "Check that exit statuses are not errors"
        run: |
          docker ps -a
          if [[ $(docker ps --all | grep -Eo '(Exited|Restarting) \([0-9]+\)' | grep -Eo '[0-9]+' | awk 'BEGIN {sum=0} { sum += $1 } END { print sum }') != '0' ]]; then
            echo 'Some process had nonzero exit code';
            exit 1;
          fi
      - name: "Print logs on failure"
        if: failure()
        run: docker-compose --file docker-compose.ci.yml logs

  push_to_dockerhub:
    name: "Push images to docker hub for caching"
    needs:
    - lint_backend
    - lint_frontend
    - lint_userservice
    - run_userservice_integration_tests
    - test_course_population
    - test_course_statistics
    - test_custom_population
    - test_filters
    - test_population_statistics
    - test_student_statistics
    - test_studyprogramme_overview
    - test_teachers_and_users
    - test_service_exit_statuses
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Download images"
        uses: actions/download-artifact@v2
        with:
          path: /tmp/
      - name: "Load built images"
        run: |
          docker load --input /tmp/artifact/backend.tar
          docker load --input /tmp/artifact/frontend.tar
          docker load --input /tmp/artifact/userservice.tar
      - name: "Login to DockerHub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Push to docker hub"
        run: docker-compose --file docker-compose.ci.yml push

  report_failure:
    runs-on: ubuntu-latest
    name: "Report test failure to oodikone notifications"
    needs:
    - lint_backend
    - lint_frontend
    - lint_userservice
    - run_userservice_integration_tests
    - test_course_population
    - test_course_statistics
    - test_custom_population
    - test_filters
    - test_population_statistics
    - test_student_statistics
    - test_studyprogramme_overview
    - test_teachers_and_users
    - test_service_exit_statuses
    - push_to_dockerhub
    if: failure()
    steps:
      - uses: actions/checkout@v2
      - name: "Send notification to slack"
        uses:  UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: test-failure
