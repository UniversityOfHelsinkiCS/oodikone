name: 'Test and release updater'

on:
  push:
    branches:
      - openshift-updater
    paths:
      - '.github/workflows/release-updater.yaml'
      - 'updater/sis-updater-worker/**'
      - 'updater/sis-updater-scheduler/**'

jobs:
  build_worker:
    name: 'Build sis-updater-worker'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: 'Build the image'
        uses: docker/build-push-action@v3
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=production
          context: updater/sis-updater-worker/
          push: false
          outputs: type=docker,dest=/tmp/worker.tar
          tags: toska/sis-updater-worker:production
      - name: 'Store built image'
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/worker.tar

  build_scheduler:
    name: 'Build sis-updater-scheduler'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: 'Build the image'
        uses: docker/build-push-action@v3
        with:
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=production
          context: updater/sis-updater-scheduler/
          push: false
          outputs: type=docker,dest=/tmp/scheduler.tar
          tags: toska/sis-updater-scheduler:production
      - name: 'Store built image'
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/scheduler.tar

  test_updater:
    name: 'Test updater'
    runs-on: ubuntu-latest
    needs:
      - build_worker
      - build_scheduler
    steps:
      - uses: actions/checkout@v3
      - name: 'Download built images'
        uses: actions/download-artifact@v3
        with:
          path: /tmp/
      - name: 'Load worker image'
        run: docker load --input /tmp/artifact/worker.tar
      - name: 'Load scheduler image'
        run: docker load --input /tmp/artifact/scheduler.tar
      - name: 'Start worker'
        run: docker-compose --file docker-compose.ci.yml up --detach --no-recreate sis-updater-worker
      - name: 'Run hourly jobs'
        run: docker-compose --file docker-compose.ci.yml run sis-updater-scheduler npm start
        env:
          SCHEDULE_IMMEDIATE: hourly
          EXIT_AFTER_IMMEDIATES: yes
      - name: 'Run daily jobs'
        run: docker-compose --file docker-compose.ci.yml run sis-updater-scheduler npm start
        env:
          SCHEDULE_IMMEDIATE: daily
          EXIT_AFTER_IMMEDIATES: yes
      - name: 'Run weekly jobs'
        run: docker-compose --file docker-compose.ci.yml run sis-updater-scheduler npm start
        env:
          SCHEDULE_IMMEDIATE: weekly
          EXIT_AFTER_IMMEDIATES: yes
      - name: 'Run prepurge'
        run: docker-compose --file docker-compose.ci.yml run sis-updater-scheduler npm start
        env:
          SCHEDULE_IMMEDIATE: prepurge
          EXIT_AFTER_IMMEDIATES: yes
      - name: 'Run purge'
        run: docker-compose --file docker-compose.ci.yml run sis-updater-scheduler npm start
        env:
          SCHEDULE_IMMEDIATE: purge
          EXIT_AFTER_IMMEDIATES: yes

  release_worker:
    name: 'Build and release Updater worker'
    runs-on: ubuntu-latest
    needs: test_updater

    steps:
      - uses: actions/checkout@v3

      - name: Build worker image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: updater-worker
          tags: production ${{ github.sha }}
          context: updater/sis-updater-worker
          containerfiles: |
            updater/sis-updater-worker/Dockerfile
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=production

      - name: Push to quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/toska
          username: toska+github
          password: ${{ secrets.QUAY_IO_TOKEN }}

  release_scheduler:
    name: 'Build and release Updater scheduler'
    runs-on: ubuntu-latest
    needs: test_updater

    steps:
      - uses: actions/checkout@v3

      - name: Build scheduler image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: updater-scheduler
          tags: production ${{ github.sha }}
          context: updater/sis-updater-scheduler
          containerfiles: |
            updater/sis-updater-scheduler/Dockerfile
          build-args: |
            SENTRY_RELEASE=${{ github.sha }}
            SENTRY_ENVIRONMENT=production

      - name: Push to quay.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/toska
          username: toska+github
          password: ${{ secrets.QUAY_IO_TOKEN }}

  sentry_release:
    name: 'Create Sentry release'
    runs-on: ubuntu-latest
    needs:
      - release_worker
      - release_scheduler

    steps:
      - uses: actions/checkout@v3
      - name: 'Create Sentry release'
        uses: getsentry/action-release@v1
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: toska
          SENTRY_PROJECT: updater
        with:
          environment: production
          set_commits: 'skip'
          sourcemaps: './build/static/js'
          url_prefix: '~/static/js'
          version: ${{ github.sha }}

      - name: 'Send notification to slack'
        uses: UniversityOfHelsinkiCS/slackbot-action@v1.4.2
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          message-type: deployment
          softa-url: https://oodikone.cs.helsinki.fi
          deployment-target: production
          softa-to-deploy: sis-updater
