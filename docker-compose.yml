version: '3'

services:
  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #   container_name: zookeeper

  # kafka:
  #   image: wurstmeister/kafka
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - HOSTNAME_COMMAND=route -n | awk '/UG[ \t]/{print $$2}'
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
  #     - KAFKA_DELETE_TOPIC_ENABLE=true
  #     - KAFKA_CREATE_TOPICS=studentnumbers:1:1,priority_studentnumbers:1:1
  #     - KAFKA_LOG_DIRS=/kafka/kafka-logs-1
  #   volumes:
  #     - ./kafka/docker.sock:/var/run/docker.sock
  #     - ./kafka/logs:/kafka/kafka-logs-1

  nats:
    image: nats-streaming
    command: -cid updaterNATS
    expose:
      - "4222"
    ports:
      - "8222:8222"
      - "4222:4222"
    container_name: nats

  analytics_db:
    image: postgres:9.6.3
    ports:
      - "5423:5432"
    volumes:
      - ./analytics_pgdata:/var/lib/postgresql/data
    container_name: oodi_analytics_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=analytics_db

  user_db:
    image: postgres:9.6.3
    ports:
      - "5422:5432"
    volumes:
      - ./user_pgdata:/var/lib/postgresql/data
    container_name: oodi_user_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=user_db,user_db_real
  usage_db:
    image: postgres:9.6.3
    ports:
      - "5424:5432"
    volumes:
      - ./usage_pgdata:/var/lib/postgresql/data
    container_name: oodi_usage_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=usage_db

  db:
    image: postgres:9.6.3
    ports:
      - "5421:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./scripts/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    container_name: oodi_db
    environment:
      - POSTGRES_MULTIPLE_DATABASES=tkt_oodi,tkt_oodi_test,tkt_oodi_real
      - POSTGRES_USER=postgres

  redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    container_name: redis

  # mongo_db:
  #   image: mongo
  #   restart: unless-stopped
  #   volumes:
  #     - ./backups/mongo/oodilearn:/dump
  #     - ./mongodata:/data/db
  #   ports:
  #     - "27017:27017"
  #   container_name: mongo_db

  backend:
    build:
      context: services/oodikone2-backend
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      REDIS: redis
      DB_URL: postgres://postgres@db:5432/tkt_oodi
      TEST_DB: postgres://postgres@db:5432/tkt_oodi_test
      FRONT_URL: http://localhost:8000
      TOKEN_SECRET: IWannaBeTheVeryBest
      OODILEARN_URL: http://oodilearn:5000
      USERSERVICE_URL: http://userservice:4567
      USAGESERVICE_URL: http://usageservice:545
      USERSERVICE_SECRET: Luukk4inenApprov3dVitunMinttuSalainenAvain666NurmivaaraPJ2019
      USAGESERVICE_SECRET: Luukk4inenApprov3dVitunMinttuSalainenAvain666NurmivaaraPJ2019
      ANALYTICS_URL: http://analytics:4568
      NATS_URI: nats://nats:4222
    volumes:
      - ./services/oodikone2-backend/:/usr/src/app
      - ./shared/models:/usr/src/app/src/models
      - ./shared/migrations:/usr/src/app/src/database/migrations
    container_name: backend
    depends_on:
      - db
      - redis

  frontend:
    build:
      context: services/oodikone2-frontend
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run docker']
    restart: unless-stopped
    ports:
      - "8081:8081"
      - "7777:7777"
    environment:
      BACKEND_ADDR: backend
      ADMINER_URL: http://localhost:5050/?pgsql=db&username=postgres
      USER_ADMINER_URL: http://localhost:5050/?pgsql=user_db&username=postgres
      ANALYTICS_ADMINER_URL: http://localhost:5050/?pgsql=analytics_db&username=postgres
      USAGE_ADMINER_URL: http://localhost:5050/?pgsql=usage_db&username=postgres
    volumes:
      - ./services/oodikone2-frontend/:/usr/src/app
    container_name: frontend

  # oodilearn:
  #   build:
  #     context: services/oodilearn/server
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   volumes:
  #     - ./services/oodilearn/data:/data
  #     - ./services/oodilearn/server:/src
  #     - ./services/oodilearn/models:/models
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - ENV=development
  #     - MONGO_URI=mongodb://mongo_db:27017/oodilearn
  #   container_name: oodilearn

  userservice:
    build:
      context: services/oodikone2-userservice
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    volumes:
      - ./services/oodikone2-userservice/:/usr/src/app
    ports:
      - 4567:4567
    environment:
      - DB_URL=postgres://postgres@user_db:5432/user_db
      - TEST_DB=postgres://postgres@user_db:5432/user_db_test
      - SECRET=Luukk4inenApprov3dVitunMinttuSalainenAvain666NurmivaaraPJ2019
      - TOKEN_SECRET=IWannaBeTheVeryBest
    depends_on:
      - user_db
    container_name: userservice

  usageservice:
    build:
      context: services/oodikone2-usageservice
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    ports:
      - 545:545
    environment:
      - PORT=545
      - DB_URL=postgres://postgres@usage_db:5432/usage_db
      - SECRET=Luukk4inenApprov3dVitunMinttuSalainenAvain666NurmivaaraPJ2019
    volumes:
      - ./services/oodikone2-usageservice/:/usr/src/app
    depends_on:
      - usage_db
    container_name: usageservice

  updater_api:
    build:
      context: services/updater_api
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    volumes:
      - ./services/updater_api/:/usr/src/app
    depends_on:
      - nats
    environment:
      - NATS_URI=nats://nats:4222
      - OODI_ADDR=https://oodikone.cs.helsinki.fi/oodi
      - TOKEN=toskab1gs8cret5
    container_name: updater_api

  updater_writer:
    build:
      context: services/updater_writer
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    volumes:
      - ./services/updater_writer/:/usr/src/app
      - ./shared/models:/usr/src/app/models
      - ./shared/migrations:/usr/src/app/database/migrations
    depends_on:
      - nats
      - db
    environment:
      NATS_URI: nats://nats:4222
      DB_URL: postgres://postgres@db:5432/tkt_oodi
      TEST_DB: postgres://postgres@db:5432/tkt_oodi_test
      TEST_DB_SCHEMA: updater_test
    container_name: updater_writer

  scheduler_mongo:
    image: mongo
    restart: unless-stopped
    volumes:
      - ./mongodata:/data/db
    expose:
      - "27017"
    container_name: scheduler_db

  # updater_scheduler:
  #   build:
  #     context: services/updater_scheduler
  #     args:
  #       NODE_ENV: 'development'
  #   command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
  #   restart: unless-stopped
  #   volumes:
  #     - ./services/updater_scheduler/:/usr/src/app
  #   depends_on:
  #     - nats
  #     - scheduler_mongo
  #   environment:
  #     - NATS_URI=nats://nats:4222
  #     - MONGO_URI=mongodb://scheduler_mongo:27017
  #     - STUDENT_NUMBERS=./all_student_numbers.txt
  #   container_name: updater_scheduler


  analytics:
    build:
      context: services/oodikone2-analytics
      args:
        NODE_ENV: 'development'
    command: ['sh', '-c', 'cp -r /usr/src/cache/node_modules/. /usr/src/app/node_modules/ && npm run dev']
    restart: unless-stopped
    volumes:
      - ./services/oodikone2-analytics/:/usr/src/app
    ports:
      - 4568:4568
    environment:
      - REDIS=analytics_redis
      - DB_URL=postgres://postgres@analytics_db:5432/analytics_db
      - TEST_DB=postgres://postgres@analytics_db:5432/analytics_db_test
    depends_on:
      - analytics_db
      - analytics_redis
    container_name: analytics

  analytics_redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6380:6379"
    volumes:
      - ./analytics-redis-data:/data
    container_name: analytics_redis

  adminer:
    image: adminer:4.6.2
    environment:
      - ADMINER_DESIGN=pepa-linha
    volumes:
      - ./adminer-plugins:/var/www/html/plugins-enabled
    ports:
      - 5050:8080
    restart: always
    container_name: adminer
